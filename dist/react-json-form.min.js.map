{"version":3,"file":"react-json-form.min.js","sources":["../src/data.js","../src/components/buttons.js","../src/components/loaders.js","../src/util.js","../src/components/form.js","../src/components/containers.js","../src/ui.js","../src/form.js","../src/index.js","../src/renderer.js"],"sourcesContent":["export function getBlankObject(schema) {\n    let keys = {};\n\n    for (let key in schema.keys) {\n        let value = schema.keys[key];\n        let type = value.type;\n\n        if (type === 'array')\n            keys[key] = getBlankArray(value);\n        else if (type === 'object')\n            keys[key] = getBlankObject(value);\n        else if (type === 'string')\n            keys[key] = '';\n        else if (schema.type === 'number')\n            return '';\n    }\n\n    return keys;\n}\n\n\nexport function getBlankArray(schema) {\n    let items = [];\n    let type = schema.items.type;\n\n    if (type === 'array')\n        items.push(getBlankArray(schema.items))\n    else if (type === 'object')\n        items.push(getBlankObject(schema.items));\n    else if (type === 'string')\n        items.push('');\n    else if (schema.type === 'number')\n        items.push('');\n\n    return items;\n}\n\n\nexport function getBlankData(schema) {\n    if (schema.type === 'array') {\n        return getBlankArray(schema);\n    }\n    else if (schema.type === 'object') {\n        return getBlankObject(schema);\n    } else if (schema.type === 'string') {\n        return '';\n    } else if (schema.type === 'number') {\n        return '';\n    }\n}\n\n\n\nfunction getSyncedArray(data, schema) {\n    let newData = JSON.parse(JSON.stringify(data));\n\n    for (let i = 0; i < data.length; i++) {\n        let item = data[i];\n\n        if (schema.items.type === 'array') {\n            newData[i] = getSyncedArray(item, schema.items);\n        } else if (schema.items.type === 'object') {\n            newData[i] = getSyncedObject(item, schema.items);\n        }\n    }\n\n    return newData;\n}\n\n\nfunction getSyncedObject(data, schema) {\n    let newData = JSON.parse(JSON.stringify(data));\n\n    let keys = [...Object.keys(schema.keys)];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key = keys[i];\n        let schemaValue = schema.keys[key];\n      \n        if (!data.hasOwnProperty(key)) {\n            if (schemaValue.type === 'string')\n                newData[key] = '';\n            else if (schemaValue.type === 'array')\n                newData[key] = getSyncedArray([], schemaValue);\n            else if (schemaValue.type === 'object')\n                newData[key] = getSyncedObject({}, schemaValue);\n        } else {\n        if (schemaValue.type === 'string')\n                newData[key] = data[key];\n            else if (schemaValue.type === 'array')\n                newData[key] = getSyncedArray(data[key], schemaValue);\n            else if (schemaValue.type === 'object')\n                newData[key] = getSyncedObject(data[key], schemaValue);\n        }\n        \n    }\n\n    return newData;\n}\n\n\nexport function getSyncedData(data, schema) {\n    // adds those keys to data which are in schema but not in data\n\n    if (schema.type === 'array') {\n        return getSyncedArray(data, schema);\n    } else if (schema.type === 'object') {\n        return getSyncedObject(data, schema);\n    }\n\n    return data;\n}\n","export default function Button({className, ...props}) {\n    if (!className)\n        className = '';\n\n    className = 'rjf-' + className + '-button';\n    return (\n        <button \n            className={className}\n            type=\"button\"\n            {...props}\n        >\n            {props.children}\n        </button>\n    );\n}","export default function Loader (props) {\n    return <div className=\"rjf-loader\"></div>;\n}\n","export const EditorContext = React.createContext();\n\n\nexport function capitalize(string) {\n    if (!string)\n        return '';\n    \n    return string.charAt(0).toUpperCase() + string.substr(1).toLowerCase();\n}\n\n\nexport function getVerboseName(name) {\n    if (name === undefined || name === null)\n        return '';\n\n    name = name.replace(/_/g, ' ');\n    return capitalize(name);\n}\n\n\nexport function getCsrfCookie() {\n    if ((document.cookie.split(';').filter((item) => item.trim().indexOf('csrftoken=') === 0)).length) {\n        return document.cookie.split(';').filter((item) => item.trim().indexOf('csrftoken=') === 0)[0].split('=')[1];\n    }\n    return null;\n}\n","import Button from './buttons';\nimport Loader from './loaders';\nimport {EditorContext, getCsrfCookie} from '../util';\n\n\nexport function FormInput({label, help_text, error, inputRef, ...props}) {\n\n    if (props.type === 'string')\n        props.type = 'text'\n\n    if (inputRef)\n        props.ref = inputRef;\n\n    return (\n        <div>\n            {label && <label>{label}</label>}\n            <input {...props} />\n        </div>\n    );\n}\n\n\nexport function FormCheckInput({label, help_text, error, value, ...props}) {\n\n    if (!label)\n        label = props.name.toUpperCase();\n\n    if (props.type === 'bool')\n        props.type = 'checkbox';\n\n    if (props.checked === undefined)\n        props.checked = value;\n\n    if (props.checked === '')\n        props.checked = false\n\n    return (\n        <div>\n            <label><input {...props} /> {label}</label>\n        </div>\n    );\n}\n\n\nexport function FormRadioInput({label, help_text, error, value, options, ...props}) {\n    return (\n        <div>\n            <label>{label}</label>\n            {options.map((option, i) => {\n                let label, inputValue;\n                if (typeof option === 'object') {\n                    label = option.label;\n                    inputValue = option.value;\n                } else {\n                    label = option;\n                    inputValue = option;\n                }\n\n                return (\n                    <label key={label + '_' + inputValue + '_' + i}>\n                        <input {...props} value={inputValue} checked={inputValue === value} /> {label}\n                    </label>\n                );\n            })}\n        </div>\n    );\n}\n\n\nexport function FormSelectInput({label, help_text, error, value, options, ...props}) {\n    return (\n        <div>\n            {label && <label>{label}</label>}\n            <select defaultValue=\"\" {...props}>\n                <option disabled value=\"\" key={'__placehlder'}>Select...</option>\n                {options.map((option, i) => {\n                    let label, inputValue;\n                    if (typeof option === 'object') {\n                        label = option.label;\n                        inputValue = option.value;\n                    } else {\n                        label = option;\n                        inputValue = option;\n                    }\n\n                    return (\n                        <option value={inputValue} key={label + '_' + inputValue + '_' + i}>\n                            {label}\n                        </option>\n                    );\n                })}\n            </select>\n        </div>\n    );\n}\n\nexport function dataURItoBlob(dataURI) {\n      // Split metadata from data\n      const splitted = dataURI.split(\",\");\n      // Split params\n      const params = splitted[0].split(\";\");\n      // Get mime-type from params\n      const type = params[0].replace(\"data:\", \"\");\n      // Filter the name property from params\n      const properties = params.filter(param => {\n            return param.split(\"=\")[0] === \"name\";\n      });\n      // Look for the name and use unknown if no name property.\n      let name;\n      if (properties.length !== 1) {\n            name = \"unknown\";\n      } else {\n            // Because we filtered out the other property,\n            // we only have the name case here.\n            name = properties[0].split(\"=\")[1];\n      }\n\n      // Built the Uint8Array Blob parameter from the base64 string.\n      const binary = atob(splitted[1]);\n      const array = [];\n      for (let i = 0; i < binary.length; i++) {\n            array.push(binary.charCodeAt(i));\n      }\n      // Create the blob object\n      const blob = new window.Blob([new Uint8Array(array)], { type });\n\n      return {blob, name};\n}\n\n\n\nexport class FormFileInput extends React.Component {\n    static contextType = EditorContext;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: props.value,\n            fileName: this.getFileName(),\n            loading: false\n        };\n\n        this.inputRef = React.createRef();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.value !== prevProps.value) {\n            this.setState({\n                value: this.props.value, \n                fileName: this.getFileName()\n            });\n        }\n    }\n\n    getFileName = () => {\n        if (!this.props.value)\n            return '';\n\n        if (this.props.type === 'data-url') {\n            return this.extractFileInfo(this.props.value).name;\n        } else if (this.props.type === 'file-url') {\n            return this.props.value;\n        } else {\n            return 'Unknown file';\n        }\n    }\n\n    extractFileInfo = (dataURL) => {\n        const {blob, name} = dataURItoBlob(dataURL);\n        return {\n            name: name,\n            size: blob.size,\n            type: blob.type\n        }\n    }\n\n    addNameToDataURL = (dataURL, name) => {\n        return dataURL.replace(';base64', ';name=' + encodeURIComponent(name) + ';base64');\n    }\n\n    handleChange = (e) => {\n        if (this.props.type === 'data-url') {\n            let file = e.target.files[0];\n            let fileName = file.name\n\n            let reader = new FileReader();\n\n            reader.onload = () => {\n\n                // this.setState({src: reader.result});\n\n                // we create a fake event object\n                let event = {\n                    target: {\n                        type: 'text',\n                        value: this.addNameToDataURL(reader.result, fileName),\n                        name: this.props.name\n                    }\n                };\n\n                this.props.onChange(event);\n\n            }\n            reader.readAsDataURL(file);\n        } else if (this.props.type === 'file-url') {\n            let endpoint = this.context.fileUploadEndpoint;\n            if (!endpoint) {\n                console.error(\n                    \"Error: fileUploadEndpoint option need to be passed \"\n                    + \"while initializing editor for enabling file uploads.\");\n                alert(\"Files can't be uploaded.\");\n                return;\n            }\n\n            this.setState({loading: true});\n\n            let formData = new FormData();\n            formData.append('field_name', this.context.fieldName);\n            formData.append('model_name', this.context.modelName);\n            formData.append('coordinates', JSON.stringify(this.props.name.split('-').slice(1)));\n            formData.append('file', e.target.files[0]);\n\n            fetch(endpoint, {\n                method: 'POST',\n                headers: {\n                    'X-CSRFToken': getCsrfCookie(),\n                },\n                body: formData\n            })\n            .then((response) => response.json())\n            .then((result) => {\n                // we create a fake event object\n                let event = {\n                    target: {\n                        type: 'text',\n                        value: result.file_path,\n                        name: this.props.name\n                    }\n                };\n\n                this.props.onChange(event);\n                this.setState({loading: false});\n            })\n            .catch((error) => {\n                alert('Something went wrong while uploading file');\n                console.error('Error:', error);\n                this.setState({loading: false});\n            });\n\n        }\n\n    }\n\n    showFileBrowser = () => {\n        this.inputRef.current.click();\n    }\n\n    render() {\n        let {label, value, ...props} = {value, ...this.props};\n        props.type = 'file';\n        props.onChange = this.handleChange;\n\n        return (\n            <div>\n                {label && <label>{label}</label>}\n                <div className=\"rjf-file-field\">\n                    {this.state.value && \n                        <div className=\"rjf-current-file-name\">Current file: <span>{this.state.fileName}</span></div>\n                    }\n                    {this.state.value && !this.state.loading && 'Change:'}\n                    {this.state.loading ?\n                        <div className=\"rjf-file-field-loading\"><Loader/> Uploading...</div>\n                    : \n                    <div className=\"rjf-file-field-input\">\n                        <FormInput {...props} inputRef={this.inputRef} />\n                    </div>\n                    }\n                    </div>\n            </div>\n        );\n    }\n}\n","import Button from './buttons';\n\n\nexport function GroupTitle(props) {\n    if (!props.children)\n        return null;\n\n    return (\n        <div className=\"rjf-form-group-title\">{props.children}</div>\n    );\n}\n\n\nexport function FormRow(props) {\n    return (\n        <div className=\"rjf-form-row\">\n            {props.onRemove &&\n                <Button \n                    className=\"remove\"\n                    onClick={(e) => props.onRemove(name)}\n                    title=\"Remove\"\n                >\n                    &times;\n                </Button>\n            }\n            <div className=\"rjf-form-row-inner\">\n                {props.children}\n            </div>\n        </div>\n    );\n}\n\n\nexport function FormGroup(props) {\n    let hasChildren = React.Children.count(props.children);\n\n    let innerClassName = props.level === 0 && !hasChildren\n        ? \"\" \n        : \"rjf-form-group-inner\";\n\n    return (\n        <div className=\"rjf-form-group\">\n            {props.level === 0 && <GroupTitle>{props.schema.title}</GroupTitle>}\n            <div className={innerClassName}>\n                {props.level > 0 && <GroupTitle>{props.schema.title}</GroupTitle>}\n                {props.children}\n                {props.addable && \n                <Button\n                    className=\"add\"\n                    onClick={(e) => props.onAdd()}\n                    title=\"Add new\"\n                >\n                    {hasChildren ? 'Add more' : 'Add'}\n                </Button>\n                }\n            </div>\n        </div>\n    );\n}\n","import {getBlankData} from './data';\nimport {Button, FormInput, FormCheckInput, FormRadioInput, FormSelectInput,\n    FormFileInput, FormRow, FormGroup} from './components';\nimport {getVerboseName} from './util';\n\n\nfunction handleChange(e, valueType, callback) {\n    let type = e.target.type\n    let value;\n\n    if (type === 'checkbox') {\n        value = e.target.checked;\n    } else {\n        value = e.target.value;\n    }\n\n    if (valueType === 'number') {\n        value = value.trim();\n        if (value !== '' && !isNaN(Number(value)))\n            value = Number(value);\n    }\n\n    callback(e.target.name, value);\n}\n\n\nfunction FormField(props) {\n    let inputProps = {\n        name: props.name,\n        value: props.data,\n    };\n\n    let type = props.schema.type;\n    if (props.schema.choices) {\n        inputProps.options = props.schema.choices;\n        type = 'select';\n    }\n    if (props.schema.widget)\n        type = props.schema.widget;\n\n    let InputField;\n\n    switch (type) {\n        case 'string':\n            InputField = FormInput;\n\n            if (props.schema.format) {\n                if (props.schema.format === 'data-url' || props.schema.format === 'file-url') {\n                    InputField = FormFileInput;\n                }\n                inputProps.type = props.schema.format;\n            }\n            else {\n                inputProps.type = 'text';\n            }\n            break;\n        case 'number':\n            inputProps.type = 'number';\n            InputField = FormInput;\n            break;\n        case 'integer':\n            inputProps.type = 'number';\n            InputField = FormInput;\n            break;\n        case 'boolean':\n            inputProps.type = 'checkbox';\n            InputField = FormCheckInput;\n            break;\n        case 'checkbox':\n            inputProps.type = 'checkbox';\n            InputField = FormCheckInput;\n            break;\n        case 'radio':\n            inputProps.type = 'radio';\n            InputField = FormRadioInput;\n            break;\n        case 'select':\n            InputField = FormSelectInput;\n            break;\n        default:\n            inputProps.type = 'text';\n            InputField = FormInput;\n    }\n\n   return (\n        <InputField \n            {...inputProps}\n            label={\n                props.editable ? <span>{props.schema.title} <Button className=\"edit\" onClick={props.onEdit} title=\"Edit\">Edit</Button></span>\n                :\n                props.schema.title\n            }\n            onChange={(e) => handleChange(e, props.schema.type, props.onChange)}\n        />\n    );\n}\n\n\nexport function getStringFormRow(data, schema, name, onChange, onRemove, removable, onEdit, editable) {\n\n    return (\n        <FormRow \n            key={name}\n            onRemove={removable ? (e) => onRemove(name) : null}\n        >\n            <FormField \n                data={data}\n                schema={schema}\n                name={name}\n                onChange={onChange}\n                onEdit={onEdit}\n                editable={editable}\n            />\n        </FormRow>\n    );\n}\n\nexport function getArrayFormRow(data, schema, name, onChange, onAdd, onRemove, level) {\n    let rows = [];\n    let groups = [];\n\n    let removable = true;\n    let min_items = schema.min_items || 0;\n    if (data.length <= min_items)\n        removable = false;\n\n    let addable = true;\n    let max_items = schema.max_items || 100;\n    if (data.length >= max_items)\n        addable = false;\n\n    for (let i = 0; i < data.length; i++) {\n        let item = data[i];\n        let childName = name + '-' + i;\n\n        if (schema.items.type === 'array') {\n            groups.push(getArrayFormRow(item, schema.items, childName, onChange, onAdd, onRemove, level + 1));\n        } else if (schema.items.type === 'object') {\n            groups.push(getObjectFormRow(item, schema.items, childName, onChange, onAdd, onRemove, level + 1));\n        } else {\n            rows.push(getStringFormRow(item, schema.items, childName, onChange, onRemove, removable));\n        } \n    }\n\n    let coords = name; // coordinates for insertion and deletion\n\n    if (rows.length || (!rows.length && !groups.length)) {\n        rows = (\n            <FormGroup\n                level={level}\n                schema={schema}\n                addable={addable}\n                onAdd={() => onAdd(getBlankData(schema.items), coords)}\n                key={'row_group_' + name}\n            >\n                {rows}\n            </FormGroup>\n        );\n    }\n\n    if (groups.length) {\n        let groupTitle = schema.title ? <div className=\"rjf-form-group-title\">{schema.title}</div> : null;\n\n        groups = (\n            <div key={'group_' + name}>\n                {groupTitle}\n                {groups.map((i, index) => (\n                    <div className=\"rjf-form-group-wrapper\" key={'group_wrapper_' + name + '_' + index}>\n                        {removable && \n                            <Button\n                                className=\"remove\"\n                                onClick={(e) => onRemove(name + '-' + index)}\n                                title=\"Remove\"\n                            >\n                                &times;\n                            </Button>\n                        }\n                        {i}\n                    </div>\n                    )\n                )}\n                {addable && \n                    <Button\n                        className=\"add\"\n                        onClick={(e) => onAdd(getBlankData(schema.items), coords)}\n                        title=\"Add new\"\n                    >\n                        Add item\n                    </Button>\n                }\n            </div>\n        )\n    }\n\n    return [...rows, ...groups];\n}\n\n\nexport function getObjectFormRow(data, schema, name, onChange, onAdd, onRemove, level) {\n    let rows = [];\n\n    let keys = [...Object.keys(schema.keys)];\n\n    if (schema.additionalProperties)\n        keys = [...keys, ...Object.keys(data).filter((k) => keys.indexOf(k) === -1)];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key = keys[i];\n        let value = data[key];\n        let childName = name + '-' + key;\n        let schemaValue = schema.keys[key] || {type: 'string'};\n\n        if (!schemaValue.title)\n            schemaValue.title = getVerboseName(key);\n\n        let removable = false;\n        if (schema.keys[key] === undefined)\n            removable = true;\n\n         if (schemaValue.type === 'array') {\n            rows.push(getArrayFormRow(value, schemaValue, childName, onChange, onAdd, onRemove, level + 1));\n        } else if (schemaValue.type === 'object') {\n            rows.push(getObjectFormRow(value, schemaValue, childName, onChange, onAdd, onRemove, level + 1));\n        } else {\n            rows.push(getStringFormRow(\n                value, schemaValue, childName, onChange, onRemove, removable, \n                () => handleKeyEdit(data, key, value, childName, onAdd, onRemove),\n                removable\n            ));\n        }\n    }\n\n    if (rows.length || schema.additionalProperties) {\n        let className = \"rjf-form-group-inner\";\n        if (level === 0 && !rows.length)\n            className = \"\";\n        \n        let coords = name;\n\n        rows = (\n            <FormGroup\n                level={level}\n                schema={schema}\n                addable={schema.additionalProperties}\n                onAdd={() => handleKeyValueAdd(data, coords, onAdd)}\n                key={'row_group_' + name}\n            >\n                {rows}\n            </FormGroup>\n        );\n    }\n\n    return rows;\n}\n\n\nfunction handleKeyValueAdd(data, coords, onAdd) {\n    let key = prompt(\"Add new key\");\n    if (key === null) // clicked cancel\n        return;\n\n    key = key.trim();\n    if (!key)\n        alert(\"(!) Can't add empty key.\\r\\n\\r\\n‎\");\n    else if (data.hasOwnProperty(key))\n        alert(\"(!) Duplicate keys not allowed. This key already exists.\\r\\n\\r\\n‎\");\n    else\n        onAdd(\"\", coords + '-' + key);   \n}\n\n\nfunction handleKeyEdit(data, key, value, coords, onAdd, onRemove) {\n    let newKey = prompt(\"Rename key\", key);\n    if (newKey === null) // clicked cancel\n        return;\n\n    newKey = newKey.trim();\n\n    if (newKey === key) // same keys\n        return;\n\n    if (!newKey)\n        return alert(\"(!) Key name can't be empty.\\r\\n\\r\\n‎\");\n    else if (data.hasOwnProperty(newKey))\n        return alert(\"(!) Duplicate keys not allowed. This key already exists.\\r\\n\\r\\n‎\");\n\n    onAdd(value, name + '-' + newKey);\n    onRemove(coords);\n}\n","import {getBlankData, getSyncedData} from './data';\nimport {getArrayFormRow, getObjectFormRow} from './ui';\nimport {EditorContext} from './util';\n\n\nexport default class Form extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.dataInput = document.getElementById(this.props.dataInputId);\n        this.schema = props.schema;\n\n        let data = props.data;\n\n        if (!data) {\n            // create empty data from schema\n            data = getBlankData(this.schema);\n        } else {\n            // data might be stale if schema has new keys, so add them to data\n            try {\n                data = getSyncedData(data, this.schema);\n            } catch (error) {\n                console.log(\"Error: Schema and data don't match\");\n                console.log(error);\n            }\n        }\n\n        this.state = {\n            value: '',\n            data: data\n        };\n        \n        // update data in the input\n        this.populateDataInput();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.data !== prevState.data) {\n            this.populateDataInput();\n        }\n    }\n\n    populateDataInput = () => {\n        this.dataInput.value = JSON.stringify(this.state.data);\n    }\n\n    handleChange = (coords, value) => {\n        /*\n            e.target.name is a chain of indices and keys:\n            xxx-0-key-1-key2 and so on.\n            These can be used as coordinates to locate \n            a particular deeply nested item.\n\n            This first coordinate is not important and should be removed.\n        */\n        coords = coords.split('-');\n\n        coords.shift(); // remove first coord\n\n        function setDataUsingCoords(coords, data, value) {\n            let coord = coords.shift();\n            if (!isNaN(Number(coord)))\n                coord = Number(coord);\n\n            if (coords.length) {\n                setDataUsingCoords(coords, data[coord], value);\n            } else {\n                data[coord] = value;\n            }\n        }\n\n        let _data = JSON.parse(JSON.stringify(this.state.data));\n\n        setDataUsingCoords(coords, _data, value);\n\n        this.setState({data: _data});\n    }\n\n    getFields = () => {\n        let data = this.state.data;\n        let formGroups = [];\n\n        try {\n            if (this.schema.type === 'array') {\n                return getArrayFormRow(\n                    data, this.schema, 'rjf',\n                    this.handleChange, this.addFieldset, this.removeFieldset,\n                    0\n                );\n            } else if (this.schema.type === 'object') {\n                return getObjectFormRow(\n                    data, this.schema, 'rjf',\n                    this.handleChange, this.addFieldset, this.removeFieldset,\n                    0\n                );\n            }\n        } catch (error) {\n            formGroups = (\n                <p style={{color: '#f00'}}>\n                    <strong>(!) Error:</strong> Schema and data do not match.\n                </p>\n            );\n        }\n\n        return formGroups;\n    }\n\n    addFieldset = (blankData, coords) => {\n        coords = coords.split('-');\n        coords.shift();\n\n        this.setState((state) => {\n            function addDataUsingCoords(coords, data, value) {\n                let coord = coords.shift();\n                if (!isNaN(Number(coord)))\n                    coord = Number(coord);\n\n                if (coords.length) {\n                    addDataUsingCoords(coords, data[coord], value);\n                } else {\n                    if (Array.isArray(data)) {\n                        data.push(value);\n                    }\n                    else {\n                        if (Array.isArray(data[coord])) {\n                            data[coord].push(value);\n                        } else {\n                            data[coord] = value;\n                        }\n                    }\n                }\n            }\n\n            let _data = JSON.parse(JSON.stringify(state.data));\n\n            addDataUsingCoords(coords, _data, blankData);\n\n            return {data: _data};\n        });\n    }\n\n    removeFieldset = (coords) => {\n        coords = coords.split('-');\n        coords.shift();\n\n        this.setState((state) => {\n            function removeDataUsingCoords(coords, data) {\n                let coord = coords.shift();\n                if (!isNaN(Number(coord)))\n                    coord = Number(coord);\n\n                if (coords.length) {\n                    removeDataUsingCoords(coords, data[coord]);\n                } else {\n                    if (Array.isArray(data))\n                        data = data.splice(coord, 1); // in-place mutation\n                    else\n                        delete data[coord];\n                }\n            }\n\n            let _data = JSON.parse(JSON.stringify(state.data));\n\n            removeDataUsingCoords(coords, _data);\n\n            return {data: _data};\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"rjf-form-wrapper\">\n                <fieldset className=\"module aligned\">\n                    <EditorContext.Provider \n                        value={{\n                            fileUploadEndpoint: this.props.fileUploadEndpoint,\n                            fieldName: this.props.fieldName,\n                            modelName: this.props.modelName,\n                        }}\n                    >\n                    {this.getFields()}\n                    </EditorContext.Provider>\n                </fieldset>\n            </div>\n        );\n    }\n}\n","import JSONForm from './renderer';\n\n\nexport default {\n  JSONForm,\n};","import Form from './form';\n\n\nexport default function JSONForm(config) {\n    this.containerId = config.containerId;\n    this.dataInputId = config.dataInputId;\n    this.schema = config.schema;\n    this.data = config.data;\n    this.fileUploadEndpoint = config.fileUploadEndpoint;\n    this.fieldName = config.fieldName;\n    this.modelName = config.modelName;\n\n    this.render = function() {\n        ReactDOM.render(\n            <Form\n                schema={this.schema}\n                dataInputId={this.dataInputId}\n                data={this.data}\n                fileUploadEndpoint={this.fileUploadEndpoint}\n                fieldName={this.fieldName}\n                modelName={this.modelName}\n            />,\n            document.getElementById(this.containerId)\n        );\n    }\n}"],"names":["getBlankObject","schema","keys","key","value","type","getBlankArray","items","push","getBlankData","getSyncedArray","data","newData","JSON","parse","stringify","i","length","item","getSyncedObject","Object","schemaValue","hasOwnProperty","Button","className","props","children","Loader","EditorContext","React","createContext","FormInput","label","inputRef","ref","h","FormCheckInput","name","toUpperCase","undefined","checked","FormRadioInput","options","map","option","inputValue","FormSelectInput","defaultValue","disabled","FormFileInput","_this","getFileName","extractFileInfo","dataURL","dataURI","splitted","split","params","replace","properties","filter","param","binary","atob","array","charCodeAt","blob","window","Blob","Uint8Array","dataURItoBlob","size","addNameToDataURL","encodeURIComponent","handleChange","e","file","target","files","fileName","reader","FileReader","onload","event","result","onChange","readAsDataURL","endpoint","context","fileUploadEndpoint","console","error","alert","setState","loading","formData","FormData","append","fieldName","modelName","slice","fetch","method","headers","document","cookie","trim","indexOf","body","then","response","json","file_path","showFileBrowser","current","click","state","createRef","componentDidUpdate","prevProps","prevState","this","render","Component","GroupTitle","FormRow","onRemove","onClick","title","FormGroup","hasChildren","Children","count","innerClassName","level","addable","onAdd","FormField","InputField","inputProps","choices","widget","format","editable","onEdit","valueType","callback","isNaN","Number","getStringFormRow","removable","getArrayFormRow","rows","groups","min_items","max_items","childName","getObjectFormRow","coords","groupTitle","index","additionalProperties","k","string","charAt","substr","toLowerCase","getVerboseName","handleKeyEdit","prompt","handleKeyValueAdd","newKey","contextType","Form","populateDataInput","dataInput","shift","_data","setDataUsingCoords","coord","getFields","formGroups","addFieldset","removeFieldset","style","color","blankData","addDataUsingCoords","Array","isArray","removeDataUsingCoords","splice","getElementById","dataInputId","log","Provider","JSONForm","config","containerId","ReactDOM"],"mappings":"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"}